#include<stdio.h>
#include<stdlib.h>
int r,c,n;
typedef struct Plant{
	int x,y;
}Plant;
Plant plants[5001];
Plant plant;
int com(const void*e1,const void*e2){
	Plant *p1,*p2;
	p1=	(Plant *)e1;
	p2=	(Plant *)e2;
	if(p1->x!=p2->x) return p1->x-p2->x;
	else return p1->y-p2->y;
}
int searchpath(Plant p,int dx,int dy){
	int steps;
	Plant plant;
	plant.x=p.x+dx;
	plant.y=p.y+dy;
	steps=2;
	while( plant.x <= r && plant.x >= 1 && plant.y <= c && plant.y >= 1){
		if(!bsearch(&plant,plants,n,sizeof(Plant),com)){
			steps=0;
			break;
		}
		plant.x+=dx;
		plant.y+=dy;
		steps++;
	}
	return steps;
}
int main(){
	int i,j,dx,dy,px,py,steps,max=2;
	scanf("%d%d",&r,&c);
	scanf("%d",&n);
	for(i=0;i<n;i++){
		scanf("%d%d",&plants[i].x,&plants[i].y);
	}
	qsort(plants,n,sizeof(Plant),com);
	for(i=0;i<n-2;i++)
		for(j=i+1;j<n-1;j++){
			dx=plants[j].x-plants[i].x;
			dy=plants[j].y-plants[i].y;
			px=plants[i].x-dx;
			py=plants[i].y-dy;
			if(px<=r&&px>=1&&py<=c&&py>=1)
				continue;
			if(plants[i].x+max*dx>r)
				continue;
			py=plants[i].y+max*dy;
			if(py>c||py<1)
				continue;
			steps=searchpath(plants[j],dx,dy);
			if(steps>max) max=steps;
		}
		if(max==2) max=0;
		printf("%d\n",max);
} 
